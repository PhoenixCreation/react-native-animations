/* eslint-disable max-len */
import React, { useEffect } from "react";
import { Dimensions, StyleSheet, View, Button } from "react-native";
import { Easing, useSharedValue, withTiming } from "react-native-reanimated";
import Svg from "react-native-svg";


import AnimatedStroke from "./AnimatedStroke";

const MARGIN = 10;
const vWidth = 719 + MARGIN;
const vHeight = 417 + MARGIN;
const width = Dimensions.get("window").width - 64;
const height = (width * vHeight) / vWidth;

// const paths = ["phoenix".split(" ")]
const paths = [
"M18.1953 69.9609V108H0.40625V5.625H39.5703C51.0078 5.625 60.0781 8.60156 66.7812 14.5547C73.5312 20.5078 76.9062 28.3828 76.9062 38.1797C76.9062 48.2109 73.6016 56.0156 66.9922 61.5938C60.4297 67.1719 51.2188 69.9609 39.3594 69.9609H18.1953ZM18.1953 55.6875H39.5703C45.8984 55.6875 50.7266 54.2109 54.0547 51.2578C57.3828 48.2578 59.0469 43.9453 59.0469 38.3203C59.0469 32.7891 57.3594 28.3828 53.9844 25.1016C50.6094 21.7734 45.9688 20.0625 40.0625 19.9688H18.1953V55.6875Z",
"M107.703 40.2188C113.281 33.75 120.336 30.5156 128.867 30.5156C145.086 30.5156 153.312 39.7734 153.547 58.2891V108H136.461V58.9219C136.461 53.6719 135.312 49.9688 133.016 47.8125C130.766 45.6094 127.438 44.5078 123.031 44.5078C116.188 44.5078 111.078 47.5547 107.703 53.6484V108H90.6172V0H107.703V40.2188Z",
"M167.68 69.2578C167.68 61.8047 169.156 55.1016 172.109 49.1484C175.062 43.1484 179.211 38.5547 184.555 35.3672C189.898 32.1328 196.039 30.5156 202.977 30.5156C213.242 30.5156 221.562 33.8203 227.938 40.4297C234.359 47.0391 237.828 55.8047 238.344 66.7266L238.414 70.7344C238.414 78.2344 236.961 84.9375 234.055 90.8438C231.195 96.75 227.07 101.32 221.68 104.555C216.336 107.789 210.148 109.406 203.117 109.406C192.383 109.406 183.781 105.844 177.312 98.7188C170.891 91.5469 167.68 82.0078 167.68 70.1016V69.2578ZM184.766 70.7344C184.766 78.5625 186.383 84.7031 189.617 89.1562C192.852 93.5625 197.352 95.7656 203.117 95.7656C208.883 95.7656 213.359 93.5156 216.547 89.0156C219.781 84.5156 221.398 77.9297 221.398 69.2578C221.398 61.5703 219.734 55.4766 216.406 50.9766C213.125 46.4766 208.648 44.2266 202.977 44.2266C197.398 44.2266 192.969 46.4531 189.688 50.9062C186.406 55.3125 184.766 61.9219 184.766 70.7344Z",
"M286.367 109.406C275.539 109.406 266.75 106.008 260 99.2109C253.297 92.3672 249.945 83.2734 249.945 71.9297V69.8203C249.945 62.2266 251.398 55.4531 254.305 49.5C257.258 43.5 261.383 38.8359 266.68 35.5078C271.977 32.1797 277.883 30.5156 284.398 30.5156C294.758 30.5156 302.75 33.8203 308.375 40.4297C314.047 47.0391 316.883 56.3906 316.883 68.4844V75.375H267.172C267.688 81.6562 269.773 86.625 273.43 90.2812C277.133 93.9375 281.773 95.7656 287.352 95.7656C295.18 95.7656 301.555 92.6016 306.477 86.2734L315.688 95.0625C312.641 99.6094 308.562 103.148 303.453 105.68C298.391 108.164 292.695 109.406 286.367 109.406ZM284.328 44.2266C279.641 44.2266 275.844 45.8672 272.938 49.1484C270.078 52.4297 268.25 57 267.453 62.8594H300.008V61.5938C299.633 55.875 298.109 51.5625 295.438 48.6562C292.766 45.7031 289.062 44.2266 284.328 44.2266Z",
"M346.062 31.9219L346.555 40.7109C352.18 33.9141 359.562 30.5156 368.703 30.5156C384.547 30.5156 392.609 39.5859 392.891 57.7266V108H375.805V58.7109C375.805 53.8828 374.75 50.3203 372.641 48.0234C370.578 45.6797 367.18 44.5078 362.445 44.5078C355.555 44.5078 350.422 47.625 347.047 53.8594V108H329.961V31.9219H346.062Z",
"M428.539 108H411.453V31.9219H428.539V108ZM410.398 12.1641C410.398 9.53906 411.219 7.35938 412.859 5.625C414.547 3.89062 416.938 3.02344 420.031 3.02344C423.125 3.02344 425.516 3.89062 427.203 5.625C428.891 7.35938 429.734 9.53906 429.734 12.1641C429.734 14.7422 428.891 16.8984 427.203 18.6328C425.516 20.3203 423.125 21.1641 420.031 21.1641C416.938 21.1641 414.547 20.3203 412.859 18.6328C411.219 16.8984 410.398 14.7422 410.398 12.1641Z",
"M474.523 56.9531L489.008 31.9219H507.992L484.719 69.3984L508.766 108H489.922L474.734 81.9844L459.617 108H440.633L464.68 69.3984L441.477 31.9219H460.32L474.523 56.9531Z",

]
const styles = StyleSheet.create({
  layer: {
    ...StyleSheet.absoluteFillObject,
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
});

const StrokeAnimation = () => {
  const progress = useSharedValue(0);
  useEffect(() => {
    progress.value = withTiming(1, {
      duration: 4000,
      easing: Easing.linear,
    });
  }, [progress]);

  const runAnimation = (end) => {
    progress.value = withTiming(end, {
      duration: 4000,
      easing: Easing.linear,
    });
  }
  return (
    <View style={styles.layer}>
    <View style={{flexDirection: "row", width: width, justifyContent: "space-between",
      position: "absolute", top: 0 }}>
      <Button
        title="0 -> 1"
        onPress={() => runAnimation(1)}
      />
      <Button
        title="1 -> 0"
        onPress={() => runAnimation(0)}
      />
      </View>
      <Svg
        width={width}
        height={height}
        viewBox={[
          -MARGIN / 2,
          -MARGIN / 2,
          vWidth + MARGIN / 2,
          vHeight + MARGIN / 2,
        ].join(" ")}
      >
        {paths.map((d, key) => (
          <AnimatedStroke progress={progress} d={d} key={key} />
        ))}
      </Svg>
    </View>
  );
};

export default StrokeAnimation;
